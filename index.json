[{"content":"Introduction Firebase provides a SDK to easily integrate the auth service into our web app.\nThe user credentials are collected using the web app. The credentials are sent to firebase via SDK. Firebase takes care of storing the user information on registration and authentication.\nGoals  We want to implement an vue app with authentication.  User should be able to view only some sections our web app without authentication. If an unauthenticated user tries to view app sections which require authentication he will be redirected to the login page.    Design  Route Structure   We will setup three routes to component mapping\n /login =\u0026gt; Renders \u0026lt;/figure\u0026gt; /register =\u0026gt; Renders \u0026lt;/Register\u0026gt; / =\u0026gt; Renders \u0026lt;/Dashboard\u0026gt; or \u0026lt;Landing/\u0026gt;  User can access \u0026lt;Dashboard/\u0026gt; only after authentication.\nWithout authentication / will render \u0026lt;Landing/\u0026gt; component. With authentication / will render \u0026lt;Dashboard/\u0026gt; component.\nImplementation Prepare the Environment  Install Node  Install yarn by running  npm install --global yarn Create a Vue project We can create a fresh Vite+Vue project by running\nyarn create vite vue-firebase --template vue The newly created project directory structure.\n├── README.md ├── index.html ├── package.json ├── public │ └── favicon.ico ├── src │ ├── App.vue │ ├── assets │ │ └── logo.png │ ├── components │ │ └── HelloWorld.vue │ └── main.js └── vite.config.js Add dependencies to the vue project yarn add -D firebase vue-router vuex Create a Firebase project To link our web app with firebase we need some configuration values which will be provided by firebase.\nTo generate the configuration values we need to add an web app to the project by clicking on the following button.\nOnce the web app is created we will have the following configuration available to us.\nTo connect connect firebase to our newly create vue project we will create a firebase.js file in src with following code.\n// Import the functions you need from the SDKs you need import { initializeApp } from \u0026#34;firebase/app\u0026#34;; import { getAuth } from \u0026#34;firebase/auth\u0026#34;;  // Your web app\u0026#39;s Firebase configuration const firebaseConfig = { \tapiKey: \u0026#34;AIzaSyByKiW6zSrOYnMpyE2Xsrzt8UOBrbYNICI\u0026#34;, \tauthDomain: \u0026#34;vue-firebase-80473.firebaseapp.com\u0026#34;, \tprojectId: \u0026#34;vue-firebase-80473\u0026#34;, \tstorageBucket: \u0026#34;vue-firebase-80473.appspot.com\u0026#34;, \tmessagingSenderId: \u0026#34;713551225442\u0026#34;, \tappId: \u0026#34;1:713551225442:web:2510467f20a8bd3967673b\u0026#34; };  // Initialize Firebase const app = initializeApp(firebaseConfig); export const auth = getAuth(app); The main objective of firebase.js fire is to export the auth object which will be used for authentication.\nCreate Vue Components Landing.vue\n\u0026lt;script\u0026gt; export default {} \u0026lt;/script\u0026gt;  \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt; Welcome to the landing page!\u0026lt;/h1\u0026gt; \u0026lt;/template\u0026gt; Dashboard.vue\n\u0026lt;script\u0026gt; export default {} \u0026lt;/script\u0026gt;  \u0026lt;template\u0026gt; \u0026lt;h1\u0026gt; Welcome to your dashboard!\u0026lt;/h1\u0026gt; \u0026lt;/template\u0026gt; Login.vue\n\u0026lt;script\u0026gt; export default { \tdata() { \treturn { \tusername: \u0026#39;\u0026#39;, \temail: \u0026#39;\u0026#39;, \tpassword: \u0026#39;\u0026#39;, \t} \t}, \tmethods: { \tonLogin(e) { \t// prevent default behavior \te.preventDefault();  \t// login code  \t} \t} } \u0026lt;/script\u0026gt;  \u0026lt;template\u0026gt; \u0026lt;article class=\u0026#34;login-form\u0026#34;\u0026gt; \t\u0026lt;form\u0026gt; \t\u0026lt;input type=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34; placeholder=\u0026#34;Email address\u0026#34; required\u0026gt; \t\u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34; required\u0026gt; \t\u0026lt;button type=\u0026#34;submit\u0026#34; @click=\u0026#34;onLogin($event)\u0026#34; :aria-busy=\u0026#34;isAuthenticating\u0026#34; :class=\u0026#34;{secondary: isAuthenticating}\u0026#34;\u0026gt;Login\u0026lt;/button\u0026gt; \t\u0026lt;/form\u0026gt;  \t\u0026lt;router-link to=\u0026#34;/register\u0026#34; :aria-disabled=\u0026#34;isAuthenticating\u0026#34;\u0026gt;Register\u0026lt;/router-link\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;/template\u0026gt; Register.vue\n\u0026lt;script\u0026gt; export default { \tdata() { \treturn { \tusername: \u0026#39;\u0026#39;, \temail: \u0026#39;\u0026#39;, \tpassword: \u0026#39;\u0026#39;, \tregistering: false \t} \t}, \tmethods: { \tonRegister(e) { \t// prevent default behavior \te.preventDefault();  \t// register code  \t} }  \u0026lt;template\u0026gt; \u0026lt;article class=\u0026#34;register-form\u0026#34;\u0026gt; \t\u0026lt;form\u0026gt; \t\u0026lt;input type=\u0026#34;username\u0026#34; id=\u0026#34;username\u0026#34; name=\u0026#34;username\u0026#34; placeholder=\u0026#34;Username\u0026#34; required v-model=\u0026#34;username\u0026#34;\u0026gt; \t\u0026lt;input type=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34; placeholder=\u0026#34;Email address\u0026#34; required v-model=\u0026#34;email\u0026#34; \u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; placeholder=\u0026#34;Password\u0026#34; required v-model=\u0026#34;password\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34; @click=\u0026#34;onRegister($event)\u0026#34; :aria-busy=\u0026#34;registering\u0026#34; :class=\u0026#34;{secondary: registering}\u0026#34;\u0026gt;Register\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;router-link to=\u0026#34;/login\u0026#34; :aria-disabled=\u0026#34;registering\u0026#34;\u0026gt;Login\u0026lt;/router-link\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;/template\u0026gt; Add State Management We are using vuex for state management.\nTo setup the vuex store we put the following code in store.js.\nstore.js\nimport { createStore } from \u0026#39;vuex\u0026#39;  // Create a new store instance. const store = createStore({ \tstate() { \treturn { \tuser: null, \tauthState: \u0026#39;Unknown\u0026#39; // Unknown, Authenticating, Authenticated \t} \t}, \tgetters: { \tuser: () =\u0026gt; state.user, \tisAuthenticated: () =\u0026gt; state.authState === \u0026#39;Authenticated\u0026#39; \u0026amp;\u0026amp; !!state.user, \tisAuthenticating: () =\u0026gt; !!state.authState === \u0026#39;Authenticating\u0026#39;, \tauthState: () =\u0026gt; state.authState, \t}, \tmutations: { \tSET_USER(state, { user }) { \tstate.user = user; \t}, \tSET_AUTH_STATE(state, { authState }) { \tstate.authState = authState; \t} \t}, \tactions: { \tsetUser({ commit }, { user }) { \tcommit(\u0026#39;SET_USER\u0026#39;, { user }) \t}, \tsetAuthState({ commit }, { authState }) { \tcommit(\u0026#39;SET_AUTH_STATE\u0026#39;, { authState }) \t} \t} })  export default store; Next we update the main.js as follows.\nconst app = createApp(App);  app.use(store); // this is added app.mount(\u0026#39;#app\u0026#39;); Add Routes We are using vue-router for route management. To create a mapping of url path =\u0026gt; Vue component using vue-router we create a routes.js.\nroutes.js\nimport { createRouter, createWebHistory } from \u0026#39;vue-router\u0026#39;; import Dashboard from \u0026#39;./components/Dashboard.vue\u0026#39; import Login from \u0026#39;./components/Login.vue\u0026#39; import Register from \u0026#39;./components/Register.vue\u0026#39; import Landing from \u0026#39;./components/Landing.vue\u0026#39; import store from \u0026#39;./store\u0026#39;;  const router = createRouter({ \thistory: createWebHistory(), \troutes: [ \t{ \tpath: \u0026#39;/\u0026#39;, \tname: \u0026#39;Main\u0026#39;, \tcomponent: () =\u0026gt; { \treturn store.state.authState === \u0026#39;Authenticated\u0026#39; ? Dashboard : Landing; \t} \t}, \t{ \tpath: \u0026#39;/login\u0026#39;, \tname: \u0026#39;Login\u0026#39;, \tcomponent: Login, \t}, \t{ \tpath: \u0026#39;/register\u0026#39;, \tname: \u0026#39;Register\u0026#39;, \tcomponent: Register, \t}, \t] }); Here we can directly access authState from store to check if the user is already authenticated and render appropriate component.\nTo connect the router with the app we update the main.js as follows.\nconst app = createApp(App)  app.use(store); app.use(router); // this is added  app.mount(\u0026#39;#app\u0026#39;) Add Authentication 1. Route management 2. State management Summary ","permalink":"https://minorblocker.com/posts/vue/firebase/","title":"How to setup Firebase Authentication with Vue Application"}]